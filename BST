// BST- Inserting a Node, Recursive, Iterative, height of the tree

#include <bits/stdc++.h>
using namespace std;

class node {
public:
    int data;
    node *left, *right;

    node() {
        left = right = NULL;
    }
    node(int d) {
        data = d;
        left = right = NULL;
    }
};

// Function to insert a node in BST
node* insert(node* root, int key) {
    if (root == NULL)
        return new node(key);

    if (key < root->data)
        root->left = insert(root->left, key);
    else if (key > root->data)
        root->right = insert(root->right, key);

    return root;
}


//Recursive------------------------

// Recursive Inorder Traversal
void Recursiveinorder(node* root) {
    if (root != NULL) {
        Recursiveinorder(root->left);
        cout << root->data << " ";
        Recursiveinorder(root->right);
    }
}

//Recursive Preorder Traversal
void Recursivepreorder(node* root){
    if(root != NULL){ 
        cout << root->data << " ";
        Recursivepreorder(root->left);
        Recursivepreorder(root->right);
    }
}

//Recursive Postorder Traversal
void Recursivepostorder(node* root){
    if(root!=NULL){
        Recursivepostorder(root->left);
        Recursivepostorder(root->right);
        cout << root->data << " ";
    }
}


//Iterative------------------------

// Iterative Inorder Traversal
void Iterativeinorder(node* root){
    if(root ==NULL){
        return;
    }
    
    stack<node*> s;
    node* curr = root;
    

    while(curr != NULL || !s.empty()){
        while(curr != NULL){
            s.push(curr);
            curr = curr->left;
        }

        curr = s.top();
        s.pop();
        cout<< curr->data <<" ";
        curr = curr->right;
    }
}

// Iterative Preorder Traversal
void Iterativepreorder(node* root){
    if(root ==NULL){
        return;
    }

    stack<node*> s;
    s.push(root);

    while(!s.empty()){
        node* curr = s.top();
        s.pop();
        cout << curr->data << " ";

        if(curr->right){
            s.push(curr->right);
        }
        if(curr->left){
            s.push(curr->left);
        }
    }

}

// Iterative Postorder Traversal
void Iterativepostorder(node* root) {
    if (root == NULL)
        return;

    stack<node*> s;
    node* prev = NULL;

    do {
        while (root != NULL) {
            s.push(root);
            root = root->left;
        }

        while (root == NULL && !s.empty()) {
            root = s.top();
            if (root->right == NULL || root->right == prev) {
                cout << root->data << " ";
                s.pop();
                prev = root;
                root = NULL;
            } else {
                root = root->right;
            }
        }
    } while (!s.empty());
}


//height of the Tree

int height(node* root){
    if(root == NULL){
        return 0;
    }
    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    int maxhight = 1+ max(leftHeight, rightHeight);
    cout<< maxhight;

}



int main() {
    node* root = NULL;

    // Insert nodes into the BST
    root = insert(root, 25);
    root->left = new node(5);
    root->right = new node(17);

    root->left->left = new node(10);
    root->left->right = new node(55);

    root->right->right = new node(99);

    cout<<"Recursive Traversals"<<endl;
    // Perform inorder traversal and print the result
    cout << "Recursive Inorder Traversal: ";
    Recursiveinorder(root);
    cout << endl;

    // Perform Recursive preorder traversal and print the result
    cout << "Recursive Preorder Traversal: ";
    Recursivepreorder(root);
    cout << endl;

    // Perform Recursive postorder traversal and print the result
    cout << "Recursive Postorder Traversal: ";
    Recursivepostorder(root);
    cout << endl;

    cout<<"Iterative Traversals"<<endl;
    // Perform Iterative inorder traversal and print the result
    cout<<"Iterative Inorder traversal: ";
    Iterativeinorder(root);
    cout<<endl;

    // Perform iterative preorder traversal and print the result
    cout<<"Iterative Preorder traversal: ";
    Iterativepreorder(root);
    cout<<endl;

    // Perform iterative postorder traversal and print the result
    cout<<"Iterative Postorder traversal: ";
    Iterativepostorder(root);
    cout<<endl;

    //Height of the Tree
    cout<<"Height of the Tree: "; 
    height(root);
    cout<<endl;

}